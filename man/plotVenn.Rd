% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/hello.R
\name{plotVenn}
\alias{plotVenn}
\title{Create Venn diagram using the nVenn algorithm.}
\usage{
plotVenn(..., nVennObj = NULL, nCycles = 7000, sNames = NULL,
  showPlot = T)
}
\arguments{
\item{...}{One list or vector (possibly mixed) per set. The function also accepts tables and data frames.
If input lists have names, those names will be used for the legend. If not, names can be
provided with \code{sNames}.}

\item{nVennObj}{Object returned from previous run. If provided, the function will improve the
diagram by running more cycles on the previous result.}

\item{nCycles}{Number of cycles for the simulation. For up to 4 sets, the default number of 7000
should be enough. Even for more complex scenarios, it may be better to run the function repeatedly,
as a large number of cycles may take up too many resources.}

\item{sNames}{List of set names, in the same order as the input lists. If the input has tables or
data frames and the name exists, it will select the corresponding column.}

\item{showPlot}{Show the result in the graphic device.}
}
\value{
nVennObj with the result of the simulation. As a side effect, The result is drawn in the
plot window.
}
\description{
This algorithm is based on a simulation
that compacts the figure. To avoid clogging the system, the simulation stops every 7000
cycles and asks the user if it sould go on. Only answering 'y' continues. Once the
diagram is compact, it will be slightly embellished. This function is different in use and
output from toVenn, which will probably deprecated.plotVenn
}
\examples{
set1 <- list(set1 = c('a', 'b', 'c'))
set2 <- list(set2 = c('e', 'f', 'c'))
set3 <- list(set3 = c('c', 'b', 'e'))
mySVG <- plotVenn(set1, set2, set3, sNames=c("One", "Two", "Three"))
showSVG(mySVG=mySVG, opacity=0.2)
}
